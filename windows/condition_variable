///////////////////////////////////////////////////////////////////////////////
/// \author (c) Marco Paland (info@paland.com)
///             2011-2012, PALANDesign Hannover, Germany
///
/// \license LGPLv3
/// This file is part of the CPP11 library.
/// CPP11 is free software: you can redistribute it and/or modify
/// it under the terms of the GNU Lesser Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// CPP11 is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
/// GNU Lesser Public License for more details.
/// You should have received a copy of the GNU Lesser Public License
/// along with CPP11. If not, see <http://www.gnu.org/licenses/>.
///
///
/// \brief <condition_variable> implementation of C++11 on Windows(tm)
///
/// This class implements the basic <condition_variable> class of C++11 for compilers
/// which do not support this standard.
/// Due to missing compiler support (variadic templates etc.) not all features
/// are supported.
/// see: http://en.cppreference.com/w/cpp/thread/condition_variable for reference
/// see: http://www.cs.wustl.edu/~schmidt/win32-cv-1.html for algorithm strategies
///
/// \todo Implementation of condition_variable::wait_until()
///
///////////////////////////////////////////////////////////////////////////////

#ifndef _STD_CONDITION_VARIABLE_WIN_
#define _STD_CONDITION_VARIABLE_WIN_

#include <windows.h>

#include <mutex>    // for unique_lock
#include <chrono>   // for duration


namespace std {

 // strongly typed enums (enum class) not available before C++11
struct cv_status
{
  enum type
  {
    no_timeout,
    timeout
  };

  cv_status(type v)
    : value_(v) { }

  operator type() const { return value_; }

private:
  type value_;
};


class condition_variable
{
  condition_variable(const condition_variable&);  // non-copyable

  typedef struct {
    unsigned int waiters_count;       // count of the number of waiters
    std::mutex   waiters_count_lock;

    enum {
      SIGNAL     = 0,
      BROADCAST  = 1,
      MAX_EVENTS = 2
    };

    ::HANDLE events[MAX_EVENTS];      // signal and broadcast event HANDLEs
  } pthread_cond_t;

  typedef pthread_cond_t native_type;
  native_type cond_;

public:
  typedef native_type* native_handle_type;

  condition_variable()
  {
    cond_.waiters_count = 0U;

    // create an auto-reset event
    cond_.events[pthread_cond_t::SIGNAL] = ::CreateEvent(
      NULL,   // no security
      FALSE,  // auto-reset event
      FALSE,  // non-signaled initially
      NULL);  // unnamed

    // create a manual-reset event
    cond_.events[pthread_cond_t::BROADCAST] = ::CreateEvent(
      NULL,   // no security
      TRUE,   // manual-reset
      FALSE,  // non-signaled initially
      NULL);  // unnamed
  }

  ~condition_variable()
  {
    (void)::CloseHandle(cond_.events[pthread_cond_t::SIGNAL]);
    (void)::CloseHandle(cond_.events[pthread_cond_t::BROADCAST]);
  }

  void notify_one()
  {
    // avoid race conditions
    cond_.waiters_count_lock.lock();
    bool have_waiters = cond_.waiters_count > 0;
    cond_.waiters_count_lock.unlock();

    if (have_waiters) {
      (void)::SetEvent(cond_.events[pthread_cond_t::SIGNAL]);
    }
  }

  void notify_all()
  {
    // avoid race conditions
    cond_.waiters_count_lock.lock();
    bool have_waiters = cond_.waiters_count > 0;
    cond_.waiters_count_lock.unlock();

    if (have_waiters) {
      (void)::SetEvent(cond_.events[pthread_cond_t::BROADCAST]);
    }
  }

  void wait(std::unique_lock<std::mutex>& lock)
  {
    wait_impl(lock, INFINITE);
  }

  template <typename Predicate>
  void wait(std::unique_lock<std::mutex>& lock, Predicate pred)
  {
    while (!pred()) {
      wait(lock);
    }
  }

  template<typename Rep, typename Period>
  cv_status wait_for(std::unique_lock<std::mutex>& lock, const std::chrono::duration<Rep, Period>& rel_time)
  {
    return wait_impl(lock, static_cast<std::uint32_t>(std::chrono::duration_cast<std::chrono::milliseconds>(rel_time).count())) ? std::cv_status::no_timeout : std::cv_status::timeout;
  }

  template<typename Rep, typename Period, typename Predicate>
  cv_status wait_for(std::unique_lock<std::mutex>& lock, const std::chrono::duration<Rep, Period>& rel_time, Predicate pred)
  {
    return wait_impl(lock, static_cast<std::uint32_t>(std::chrono::duration_cast<std::chrono::milliseconds>(rel_time).count())) ? std::cv_status::no_timeout : std::cv_status::timeout;
  }

  template <typename Clock, typename Duration>
  cv_status wait_until(std::unique_lock<std::mutex>& lock, const std::chrono::time_point<Clock, Duration>& abs_time)
  {
    // TBD
  }

  template <typename Clock, typename Duration, typename Predicate>
  bool wait_until(std::unique_lock<std::mutex>& lock, const std::chrono::time_point<Clock, Duration>& abs_time, Predicate pred)
  {
    // TBD
  }

  native_handle_type native_handle()
  {
    return &cond_;
  }

private:
  bool wait_impl(std::unique_lock<std::mutex>& lock, std::uint32_t milliseconds)
  {
    // avoid race conditions
    cond_.waiters_count_lock.lock();
    cond_.waiters_count++;
    cond_.waiters_count_lock.unlock();

    // it's ok to release the external mutex here since Windows
    // manual-reset events maintain state when used with SetEvent
    lock.unlock();

    // wait for either event to become signaled due to notify_one()
    // being called or notify_all() being called.
    DWORD result = ::WaitForMultipleObjects(2U, cond_.events, FALSE, milliseconds);

    cond_.waiters_count_lock.lock();
    cond_.waiters_count--;
    bool last_waiter = (result == WAIT_OBJECT_0 + pthread_cond_t::BROADCAST) &&
                       (cond_.waiters_count == 0);
    cond_.waiters_count_lock.unlock();

    // some thread called notify_all
    if (last_waiter) {
      // we're the last waiter to be notified or to stop waiting, so
      // reset the manual event. 
      (void)::ResetEvent(cond_.events[pthread_cond_t::BROADCAST]);
    }

    // reacquire the external mutex
    lock.lock();

    return result != WAIT_TIMEOUT;
  }
};

} // namespace std

#endif // _STD_CONDITION_VARIABLE_WIN_
