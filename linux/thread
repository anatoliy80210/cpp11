///////////////////////////////////////////////////////////////////////////////
/// \author (c) Marco Paland (info@paland.com)
///             2013, PALANDesign Hannover, Germany
///
/// \license LGPLv3
/// This file is part of the CPP11 library.
/// CPP11 is free software: you can redistribute it and/or modify
/// it under the terms of the GNU Lesser Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// CPP11 is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
/// GNU Lesser Public License for more details.
/// You should have received a copy of the GNU Lesser Public License
/// along with CPP11. If not, see <http://www.gnu.org/licenses/>.
///
///
/// \brief <thread> implementation of C++11 on linux
///
/// This class implements the basic <thread> class of C++11 for compilers
/// which do not (yet) support this.
/// Due to missing compiler support (variadic templates etc.) not all features
/// are supported.
/// see: http://en.cppreference.com/w/cpp/thread/thread for reference
///
/// You need to compile this with g++ -lpthread option!
///
///////////////////////////////////////////////////////////////////////////////

#ifndef _STD_THREAD_LINUX_
#define _STD_THREAD_LINUX_

#include <pthread.h>   // for pthreads
#include <unistd.h>    // for usleep
#include "../chrono"   // for duration


namespace std {

class thread
{
  thread(thread const&);  // non-copyable

public:
  // defines the implementation specific handle type
  typedef unsigned long int native_handle_type;

  // thread::id
  class id {
    native_handle_type thread_;

  public:
    id()
     : thread_(0U)
    { }
 
    explicit id(native_handle_type _id)
     : thread_(_id)
    { }

  private:
    friend class thread;

    friend bool
    operator==(thread::id x, thread::id y)
    {
      return x.thread_ == y.thread_;
    }

    friend bool
    operator<(thread::id x, thread::id y)
    {
      return x.thread_ < y.thread_;
    }

    template<class Elem, class Traits>
    friend std::basic_ostream<Elem, Traits>&
    operator<<(std::basic_ostream<Elem, Traits>& out, thread::id id) 
    {
      out << id.thread_;
      return out;
    }
  };


  thread()
  { }

  template<typename Func>
  thread(Func func)
  {
    int err = pthread_create(
      static_cast<pthread_t*>id_.thread_,
      NULL,
      reinterpret_cast<unsigned int(__stdcall *)(void*)>(func),
      static_cast<void*>(0)
    );
  }

  template<typename Func, typename Arg>
  thread(Func func, Arg arg)
  {
    int err = pthread_create(
      static_cast<pthread_t*>id_.thread_,
      NULL,
      reinterpret_cast<unsigned int(__stdcall *)(void*)>(func),
      reinterpret_cast<void*>(arg)
    );
  }

  ~thread()
  {
    if (joinable()) {
      (void)::pthread_cancel(native_handle());
    }
  }

  // returns the id of the thread 
  thread::id get_id() const
  {
    return id_;
  }

  // checks whether the thread is joinable, i.e. potentially running in parallel context
  bool joinable() const
  {
    return !(id_ == id());
  }

  // waits for a thread to finish its execution
  void join()
  {
    if (joinable()) {
      (void)::pthread_join(native_handle());
      detach();
    }
  }

  // permits the thread to execute independently from the thread handle 
  void detach()
  {
    id_.thread_ = 0U;
  }

  // swaps two thread objects
  void swap(thread& other)
  {
    std::swap(id_, other.id_);
  }

  native_handle_type native_handle()
  {
    return id_.thread_;
  }

  // returns a value that hints at the number of hardware thread contexts
  static unsigned int hardware_concurrency()
  {
    return 0U;
  }

private:
  id id_;
};


namespace this_thread {
  inline thread::id get_id()
  {
    return thread::id(reinterpret_cast<thread::native_handle_type>(::GetCurrentThreadId()));
  }

  inline void yield()
  {
    ::pthread_yield();
  }

  template<typename Clock, typename Duration>
  void sleep_until(const chrono::time_point<Clock, Duration>& abs_time)
  {
    sleep_for(abs_time - Clock::now());
  }

  template<typename Rep, typename Period>
  void sleep_for(const chrono::duration<Rep, Period>& rel_time)
  {
    (void)::usleep(static_cast<int>(chrono::duration_cast<chrono::microseconds>(rel_time).count()));
  }
} // namespace this_thread

} // namespace std

#endif // _STD_THREAD_LINUX_
